#include <iostream>

int arr[100][100] = { 0, };
int squre_size[50 * 2] = { 0, };
int squre_size_temp[50 * 2] = { 0, };
int matrix_x[50 * 2] = { 0, };
int matrix_y[50 * 2] = { 0, };
int matrix_multi_val[50 * 2] = { 0, };


int n = 0;
int last_squre_idx_x = 0;
int last_squre_idx_y = 0;
int cnt = 0;
int mat_cnt = 0;
int squre_num = 0;

int find_squre(int i, int j)
{
	int cx = 0;
	int cy = 0;

	if (i + 1 <= n || j + 1 <= n)
	{
		if (arr[i + 1][j] == 1)
			cy = 1;
		if (arr[i][j + 1] == 1)
			cx = 1;
		if (cx == 1 && cy != 1)
		{
			find_squre(i, j + 1);
			return 0;
		}
		else if (cx != 1 && cy == 1)
		{
			find_squre(i + 1, j);
			return 0;
		}
		else if (cx == 1 && cy == 1)
		{
			find_squre(i + 1, j + 1);
			return 0;
		}
		else
		{
			last_squre_idx_x = i;
			last_squre_idx_y = j;
			return 0;
		}
	}
	return 0;
}

int find_multi_num()
{
	int i = 0;
	int j = 0;
	int multi_sum = 0;

	for (i = 0; i < cnt; i = i + 2)
	{
		for (j = 1; j < cnt; j = j + 2)
		{
			if (squre_size_temp[i] == squre_size_temp[j] && squre_size_temp[i] != 0)
			{
				matrix_x[mat_cnt] = i;
				matrix_y[mat_cnt] = j;
				matrix_multi_val[mat_cnt++] = squre_size[j - 1] * squre_size[j] * squre_size[i + 1];

				squre_size_temp[i] = 0;
				squre_size_temp[j] = 0;
				find_multi_num();
				return 0;
				/*
				squre_num = squre_num - 1;
				if (squre_num == 0)
					break;*/
			}
		}
	}

	return 0;
}



int main()
{
	int i = 0;
	int j = 0;
	int squre_start_flag = 0;
	int multi_sum = 0;
	int tmp_x = 0;
	int tmp_y = 0;
	int tmp_val = 0;
	int case_num = 0;
	int k = 0;
	int l = 0;
	int m = 0;
	FILE *fp;
	fp = fopen("sample_input.txt", "r");

	fscanf(fp, "%d", &case_num);
	for(k=0;k<case_num;k++)
	{
		multi_sum = 0;
		squre_start_flag = 0;
		squre_start_flag = 0;
		multi_sum = 0;
		tmp_x = 0;
		tmp_y = 0;
		tmp_val = 0;
		cnt = 0;
		last_squre_idx_x = 0;
		last_squre_idx_y = 0;
		mat_cnt = 0;
		squre_num = 0;
		for (l = 0; l < 100; l++)
		{
			for (m = 0; m < 100; m++)
			{
				arr[l][m] = 0;
			}
			squre_size[l] = 0;
			matrix_x[l] = 0;
			matrix_y[l] = 0;
			matrix_multi_val[l] = 0;
		}

		fscanf(fp, "%d", &n);

		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				fscanf(fp, "%d", &arr[i][j]);
				if (arr[i][j] != 0)
				{
					arr[i][j] = 1;
					if (i == 0 && j == 0)
					{
						arr[i][j] = -1;
					}
					else if ((arr[i - 1][j] == 0) && (arr[i][j - 1] == 0))
					{
						arr[i][j] = -1;
					}
					else if ((i - 1 < 0) && (arr[i][j - 1] == 0))
					{
						arr[i][j] = -1;
					}
					else if ((j - 1 < 0) && (arr[i - 1][j] == 0))
					{
						arr[i][j] = -1;
					}
				}
			}
		}
		//for (i = 0; i < n; i++)
		//{
		//	for (j = 0; j < n; j++)
		//	{
		//		printf("%d ", arr[i][j]);
		//	}
		//	printf("\n");
		//}

		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				if (arr[i][j] == -1)
				{
					find_squre(i, j);
					squre_size[cnt] = last_squre_idx_x - i + 1;
					squre_size_temp[cnt++] = last_squre_idx_x - i + 1;
					//printf("%d X", squre_size[cnt - 1]);

					squre_size[cnt] = last_squre_idx_y - j + 1;
					squre_size_temp[cnt++] = last_squre_idx_y - j + 1;
					//printf("%d \n", squre_size[cnt - 1]);

				}
			}
		}
		squre_num = cnt / 2;

		find_multi_num();
		for (i = 0; i < mat_cnt; i++)
		{
			for (j = 0; j < mat_cnt; j++)
			{
				if (matrix_multi_val[i] < matrix_multi_val[j])
				{
					tmp_val = matrix_multi_val[i];
					matrix_multi_val[i] = matrix_multi_val[j];
					matrix_multi_val[j] = tmp_val;

					tmp_x = matrix_x[i];
					matrix_x[i] = matrix_x[j];
					matrix_x[j] = tmp_x;

					tmp_y = matrix_y[i];
					matrix_y[i] = matrix_y[j];
					matrix_y[j] = tmp_y;
				}
			}
		}


		for (i = 0; i < mat_cnt; i++)
		{
			multi_sum = multi_sum + squre_size[matrix_y[i] - 1] * squre_size[matrix_y[i]] * squre_size[matrix_x[i] + 1];

			if (i + 1 > mat_cnt)
			{
				break;
			}
			squre_size[matrix_y[i + 1] - 1] = squre_size[matrix_y[i] - 1];
		}
		printf("#%d %d\n", k+1, multi_sum);
	}
	printf("break point");
}
